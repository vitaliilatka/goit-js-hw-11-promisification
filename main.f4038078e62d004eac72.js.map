{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCbbK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAAAC,GACjBC,YAAW,WACT,IAAMY,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAE/Df,EAAQa,KACP,SAIDX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAE7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCrBrC,IAIQe,EAAkB,SAAAC,GACtB,IAL+BC,EAAKC,EAK9BvB,GALyBsB,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAKpD,OAAO,IAAIpB,SAAQ,SAACC,EAASwB,GAC3BvB,YAAW,WACUoB,KAAKE,SAAW,IAEjCvB,EAAQ,CAAEyB,GAAIP,EAAYO,GAAItB,KAAMN,IAEtC2B,EAAON,EAAYO,MAClB5B,OAID6B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAItB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAKFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAAMvB,KAAKoB,GAAYI,MAAMH,GAC/DV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,G","file":"main.f4038078e62d004eac72.js","sourcesContent":["const delay = ms => {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve(ms);\r\n      }, ms);\r\n    });\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n  const toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        const updatedUsers = allUsers.map(user =>\r\n          user.name === userName ? { ...user, active: !user.active } : user,\r\n        );\r\n        resolve(updatedUsers);\r\n      }, 1000);\r\n    });\r\n  };\r\n  \r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n  \r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n  \r\n  const makeTransaction = transaction => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n        if (canProcess) {\r\n          resolve({ id: transaction.id, time: delay });\r\n        }\r\n        reject(transaction.id);\r\n      }, delay);\r\n    });\r\n  };\r\n  \r\n  const logSuccess = ({ id, time }) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n  \r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  /*\r\n   * Должно работать так\r\n   */\r\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"],"sourceRoot":""}